generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  name        String?
  passwordHash String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userApps    UserApp[]
  fakeDataPresets FakeDataPreset[]
  vaultItems VaultItem[]
  userBreaches UserBreach[]
}

model App {
  id        String    @id @default(uuid())
  name      String
  url       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userApps  UserApp[]
}

model UserApp {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  app         App      @relation(fields: [appId], references: [id])
  appId       String
  emailUsed   String?
  phoneUsed   String?
  locationAccess Boolean @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, appId]) //Prevents duplicate entries
}

model FakeDataPreset {
  id        String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  presetName String
  email     String?
  phone     String?
  pan       String?
  aadhar    String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VaultItem {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  title          String
  encryptedContent String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model DataBreach {
  id             String        @id @default(uuid())
  name           String
  breachDate     DateTime
  description    String?
  dataTypesLeaked String?
  pwnedCount     Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userBreaches   UserBreach[]
}

model UserBreach {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  dataBreach DataBreach @relation(fields: [dataBreachId], references: [id])
  dataBreachId String
  emailCompromised String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, dataBreachId]) //Prevents duplicate entries
}